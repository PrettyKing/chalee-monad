const { ethers } = require(\"hardhat\");\nconst fs = require('fs');\nconst path = require('path');\n\nasync function main() {\n  console.log(\"Starting deployment to Monad Testnet...\");\n  \n  // Get the deployer account\n  const [deployer] = await ethers.getSigners();\n  console.log(\"Deploying contracts with the account:\", deployer.address);\n  \n  // Check balance\n  const balance = await deployer.getBalance();\n  console.log(\"Account balance:\", ethers.utils.formatEther(balance), \"ETH\");\n  \n  if (balance.lt(ethers.utils.parseEther(\"0.1\"))) {\n    console.warn(\"‚ö†Ô∏è  Warning: Low balance. Make sure you have enough MON tokens for gas fees.\");\n  }\n  \n  // Deploy ChaleeToken\n  console.log(\"\\nüìã Deploying ChaleeToken...\");\n  const ChaleeToken = await ethers.getContractFactory(\"ChaleeToken\");\n  \n  console.log(\"üöÄ Deployment in progress...\");\n  const chaleeToken = await ChaleeToken.deploy();\n  \n  console.log(\"‚è≥ Waiting for deployment confirmation...\");\n  await chaleeToken.deployed();\n  \n  console.log(\"\\n‚úÖ ChaleeToken deployed successfully!\");\n  console.log(\"üìç Contract address:\", chaleeToken.address);\n  console.log(\"üîó Transaction hash:\", chaleeToken.deployTransaction.hash);\n  \n  // Get contract info\n  const name = await chaleeToken.name();\n  const symbol = await chaleeToken.symbol();\n  const totalSupply = await chaleeToken.totalSupply();\n  const maxSupply = await chaleeToken.MAX_SUPPLY();\n  \n  console.log(\"\\nüìä Contract Information:\");\n  console.log(\"   Name:\", name);\n  console.log(\"   Symbol:\", symbol);\n  console.log(\"   Total Supply:\", ethers.utils.formatEther(totalSupply));\n  console.log(\"   Max Supply:\", ethers.utils.formatEther(maxSupply));\n  console.log(\"   Owner:\", deployer.address);\n  \n  // Save deployment info\n  const deploymentInfo = {\n    network: \"monadTestnet\",\n    contractName: \"ChaleeToken\",\n    contractAddress: chaleeToken.address,\n    transactionHash: chaleeToken.deployTransaction.hash,\n    deployer: deployer.address,\n    deployedAt: new Date().toISOString(),\n    gasUsed: chaleeToken.deployTransaction.gasLimit?.toString(),\n    gasPrice: chaleeToken.deployTransaction.gasPrice?.toString(),\n    contractInfo: {\n      name,\n      symbol,\n      totalSupply: totalSupply.toString(),\n      maxSupply: maxSupply.toString()\n    }\n  };\n  \n  // Create deployments directory if it doesn't exist\n  const deploymentsDir = path.join(__dirname, '..', 'deployments');\n  if (!fs.existsSync(deploymentsDir)) {\n    fs.mkdirSync(deploymentsDir, { recursive: true });\n  }\n  \n  // Save deployment info to file\n  const deploymentFile = path.join(deploymentsDir, 'monadTestnet.json');\n  fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));\n  \n  console.log(\"\\nüíæ Deployment info saved to:\", deploymentFile);\n  \n  console.log(\"\\nüéâ Deployment completed successfully!\");\n  console.log(\"\\nüìã Next steps:\");\n  console.log(\"   1. Update your .env file with CONTRACT_ADDRESS=\", chaleeToken.address);\n  console.log(\"   2. Verify the contract (optional):\");\n  console.log(\"      npx hardhat verify --network monadTestnet\", chaleeToken.address);\n  console.log(\"   3. Interact with your contract using the web interface\");\n  \n  // Explorer links\n  console.log(\"\\nüîç View on Monad Explorer:\");\n  console.log(`   https://explorer-testnet.monad.xyz/address/${chaleeToken.address}`);\n  console.log(`   https://explorer-testnet.monad.xyz/tx/${chaleeToken.deployTransaction.hash}`);\n}\n\n// Error handling\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(\"\\n‚ùå Deployment failed:\");\n    console.error(error);\n    process.exit(1);\n  });